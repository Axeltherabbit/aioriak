

class RiakObject:
    '''
    The RiakObject holds meta information about a Riak object, plus the
    object's data.
    '''

    def __init__(self, client, bucket, key=None):
        '''
        Construct a new RiakObject.
        :param client: A RiakClient object.
        :type client: :class:`RiakClient <aioriak.client.RiakClient>`
        :param bucket: A RiakBucket object.
        :type bucket: :class:`RiakBucket <aioriak.bucket.RiakBucket>`
        :param key: An optional key. If not specified, then the key
         is generated by the server when :func:`store` is called.
        :type key: string
        '''

        if key is not None and len(key) == 0:
            raise ValueError('Key name must either be "None"'
                             ' or a non-empty string.')
        self.client = client
        self.bucket = bucket
        self.key = key

    async def reload(self):
        '''
        Reload the object from Riak. When this operation completes, the
        object could contain new metadata and a new value, if the object
        was updated in Riak since it was last retrieved.
        .. note:: Even if the key is not found in Riak, this will
           return a :class:`RiakObject`. Check the :attr:`exists`
           property to see if the key was found.
        :rtype: :class:`RiakObject`
        '''

        await self.client.get(self)
        return self
